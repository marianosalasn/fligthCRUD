/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package VuelosPresentacion;

import DAOS.ListaCiudades;
import DAOS.ListaVuelos;
import Logic.Ciudad;
import Logic.Escala;
import Logic.Vuelo;
import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import java.util.Observable;
import java.util.Observer;
import java.util.Vector;
import javax.swing.BorderFactory;
import javax.swing.ComboBoxModel;
import javax.swing.event.ListDataEvent;
import javax.swing.event.ListDataListener;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author masan
 */
public class VistaVuelos extends javax.swing.JFrame {

    /**
     * Creates new form vista
     */
    public VistaVuelos(ControlVistaVuelo controller) {
        setTitle("Adminitracion de Vuelos by Mariano Salas");
        this.controller=controller;
        initComponents();
        enableComponents(false);
        this.setDefaultCloseOperation(HIDE_ON_CLOSE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        numeroTextSpace = new javax.swing.JTextField();
        origenBox = new javax.swing.JComboBox<>();
        destinoBox = new javax.swing.JComboBox<>();
        origenLabel = new javax.swing.JLabel();
        destinoLabel = new javax.swing.JLabel();
        salidaBox = new javax.swing.JComboBox<>(controller.getHoras());
        llegadaBox = new javax.swing.JComboBox<>(controller.getHoras());
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        vuelosScrollPane = new javax.swing.JScrollPane();
        vuelosTable = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        cityBox = new javax.swing.JComboBox<>();
        salidaEscalaBox = new javax.swing.JComboBox<>(controller.getHoras());
        llegadaEscalaBox = new javax.swing.JComboBox<>(controller.getHoras());
        addButton = new javax.swing.JButton();
        escalaScrollPanel = new javax.swing.JScrollPane();
        escalasTable = new javax.swing.JTable();
        updateFlyButton = new javax.swing.JButton();
        addFlyButton = new javax.swing.JButton();
        infoText = new javax.swing.JLabel();
        estadoActual = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Numero");

        numeroTextSpace.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                numeroTextSpaceKeyReleased(evt);
            }
        });

        origenBox.setModel(getComboBoxModel());

        destinoBox.setModel(getComboBoxModel());

        origenLabel.setText("Origen");

        destinoLabel.setText("Destino");

        jLabel2.setText("Salida");

        jLabel3.setText("Llegada");

        vuelosTable.setModel(getModeloTable());
        vuelosScrollPane.setViewportView(vuelosTable);

        jLabel4.setText("Vuelos");

        jLabel5.setText("Escalas");

        cityBox.setModel(getComboBoxModel());

        addButton.setText("+");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        escalasTable.setModel(getTablaEscalasModel());
        escalaScrollPanel.setViewportView(escalasTable);

        updateFlyButton.setText("Actualizar");
        updateFlyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateFlyButtonActionPerformed(evt);
            }
        });

        addFlyButton.setText("Agregar");
        addFlyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarVueloAction(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(153, 153, 255));
        jLabel6.setText("Presione Actualizar o Agregar Para habilitar las escalas sobre el vuelo");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(escalaScrollPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 394, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(87, 87, 87)
                                .addComponent(estadoActual, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(191, 191, 191)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addComponent(vuelosScrollPane)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cityBox, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(salidaEscalaBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(llegadaEscalaBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(addButton)))))
                .addGap(45, 45, 45))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(origenLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(destinoLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(destinoBox, 0, 139, Short.MAX_VALUE)
                            .addComponent(origenBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(numeroTextSpace))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(108, Short.MAX_VALUE)
                        .addComponent(updateFlyButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addFlyButton)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(68, 68, 68)
                        .addComponent(infoText, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(salidaBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(llegadaBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(numeroTextSpace, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(vuelosScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(origenBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(origenLabel)
                            .addComponent(salidaBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(destinoBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(destinoLabel)
                            .addComponent(llegadaBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(updateFlyButton)
                                    .addComponent(infoText, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(addFlyButton))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(estadoActual, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(14, 14, 14)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(salidaEscalaBox, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(llegadaEscalaBox, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cityBox, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel5)
                                .addGap(27, 27, 27)))))
                .addComponent(escalaScrollPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 96, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void agregarVueloAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarVueloAction
        if(!Utility.Utility.isDigit(numeroTextSpace.getText())){
           infoText.setText("<html><p style= 'color : red'>numero debe ser int</p><html>");
           numeroTextSpace.setBorder(BorderFactory.createMatteBorder(1, 1, 1, 1, Color.red));
           return;
        }
        if(origenBox.getSelectedIndex() < 0 || destinoBox.getSelectedIndex() < 0 || llegadaBox.getSelectedIndex() < 0 || salidaBox.getSelectedIndex() < 0) {
         infoText.setText("<html><p style= 'color : red'>Seleccione Datos Validos</p><html>");
         return;
        }
        if(origenBox.getSelectedItem().equals(destinoBox.getSelectedItem())){
            infoText.setText("<html><p style= 'color : red'>Las ciudades deben discernir</p><html>");
            return;
             //numeroTextSpace.setBorder(BorderFactory.createMatteBorder(1, 1, 1, 1, Color.red));
        }
        
        
        if(numeroTextSpace.getText().isEmpty()){
            infoText.setText("<html><p style= 'color : red'>Digite los datos correctamente</p><html>");
             numeroTextSpace.setBorder(BorderFactory.createMatteBorder(1, 1, 1, 1, Color.red));
        }else
        {
            Vuelo v= new Vuelo(numeroTextSpace.getText(),(Ciudad)origenBox.getSelectedItem(),(Ciudad)destinoBox.getSelectedItem(),(int)llegadaBox.getSelectedItem(), (int)salidaBox.getSelectedItem());
            Vuelo nuevo = controller.agregar(v);
            infoText.setText("<html><p style= 'color : green'>Agregado</p><html>");
             numeroTextSpace.setBorder(BorderFactory.createMatteBorder(1, 1, 1, 1, Color.BLACK));
             setSelectedVuelo(nuevo);
             enableComponents(true);
        }
        
    }//GEN-LAST:event_agregarVueloAction
    private void enableComponents(boolean enable){
        cityBox.setEnabled(enable);
        salidaEscalaBox.setEnabled(enable);
        llegadaEscalaBox.setEnabled(enable);
        addButton.setEnabled(enable);
        if(!enable) {
            origenBox.setSelectedIndex(-1);
            destinoBox.setSelectedIndex(-1);
            llegadaBox.setSelectedItem(0);
            salidaBox.setSelectedIndex(0);
            this.repaint();
            setSelectedVuelo(null);
        }

    } 
    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        // TODO add your handling code here:
        int duracion = (int)llegadaEscalaBox.getSelectedItem()-(int)salidaEscalaBox.getSelectedItem();
        Escala e = new Escala(duracion, (int)salidaEscalaBox.getSelectedItem(), (int)llegadaEscalaBox.getSelectedItem(),(Ciudad)cityBox.getSelectedItem());
        controller.addEscala(selectedVuelo.getNum(),e );
        
    }//GEN-LAST:event_addButtonActionPerformed

    private void updateFlyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateFlyButtonActionPerformed
        // TODO add your handling code here:
        agregarVueloAction(evt);
        
    }//GEN-LAST:event_updateFlyButtonActionPerformed

    private void numeroTextSpaceKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_numeroTextSpaceKeyReleased
        // TODO add your handling code here:
        enableComponents(false);
    }//GEN-LAST:event_numeroTextSpaceKeyReleased
    public void setCityBox(){
        origenBox.setMaximumRowCount(controller.getCities().getCiudades().size());
    }
    
    void setSelectedVuelo(Vuelo v) {
        selectedVuelo = v;
        tablaEscalasModel.changeVuelo(selectedVuelo);
    }
    
    public ComboBoxModel<Ciudad> getComboBoxModel() {
        return new ComboBoxCiudadModel();
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VistaVuelos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VistaVuelos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VistaVuelos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VistaVuelos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VistaVuelos(new ControlVistaVuelo()).setVisible(true);
            }
        });
    }
    private ControlVistaVuelo controller;
    
     
    
    private static class ComboBoxCiudadModel implements ComboBoxModel<Ciudad>, Observer {
       
        Vector<Ciudad> elementos = new Vector<>(ListaCiudades.getInstance().getCiudades().size());
        List<ListDataListener> dataListeners = new ArrayList<>();
        Ciudad selected;

        public ComboBoxCiudadModel() {
            ListaCiudades.getInstance().addObserver(this);
            elementos.addAll(ListaCiudades.getInstance().getCiudades());
            selected = elementos.size() > 0 ? elementos.firstElement() : null;
        }
        

        @Override
        public void setSelectedItem(Object anItem) {
            selected = (Ciudad)anItem;
        }

        @Override
        public Object getSelectedItem() {
            return selected;
        }

        @Override
        public int getSize() {
            return elementos.size();
        }

        @Override
        public Ciudad getElementAt(int index) {
            return elementos.get(index);
        }

        @Override
        public void addListDataListener(ListDataListener l) {
            this.dataListeners.add(l);
            
        }

        @Override
        public void removeListDataListener(ListDataListener l) {
            this.dataListeners.remove(l);
        }

        @Override
        public void update(Observable o, Object arg) {
            if(o instanceof ListaCiudades){
                actualizarVector(((ListaCiudades)o).getCiudades());
            }
        }

        private void actualizarVector(List<Ciudad> ciudades) {
            int previousSize = elementos.size();
            elementos.removeAllElements();
            dataListeners.forEach(listener -> 
                        listener.intervalRemoved(new ListDataEvent(this, ListDataEvent.INTERVAL_REMOVED, 0 , previousSize)));
            elementos.addAll(ciudades);
            dataListeners.forEach(listener -> 
                        listener.intervalAdded(new ListDataEvent(this, ListDataEvent.INTERVAL_ADDED, 0 , ciudades.size())));
        }
    } 
    private static class TablaEscalasModel extends AbstractTableModel implements Observer {
        List<Escala> elementos;
        Vuelo v;

        public TablaEscalasModel(Vuelo seleccionado) {
            List<Escala> escalasSelectionadas = seleccionado != null ? seleccionado.getEscalas() : new ArrayList<>();
            elementos = new ArrayList<>(escalasSelectionadas);
        }

        @Override
        public int getRowCount() {
            return elementos.size();
        }

        @Override
        public int getColumnCount() {
            return 4;
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            Escala escala = elementos.get(rowIndex);
            switch(columnIndex){
                case 0: return escala.getEscalaCity().getNombre();
                case 1 : return escala.getLlegada();
                case 2 : return escala.getSalida();
                case 3: return escala.getLlegada() - escala.getSalida();
                default: throw new IndexOutOfBoundsException();
            }
        }
        
        public void changeVuelo(Vuelo v) {
            if(v == null) {
                elementos = new ArrayList<>();
                fireTableDataChanged();
                return;
            }
            if(this.v != null) this.v.deleteObserver(this);
            this.v = v;
            this.v.addObserver(this);
            updateData();
           
        }
        
        private void updateData() {
            elementos = new ArrayList<>(v.getEscalas());
            this.fireTableDataChanged();
        }
        
        @Override
        public String getColumnName(int col) {
             switch(col){
                 case 0 : return "Ciudad";
                 case 1 : return "Llegada";
                 case 2 : return "Salida";
                 case 3 : return "Escala";
                 default: throw new IndexOutOfBoundsException();
             }
        }

        @Override
        public void update(Observable o, Object arg) {
            updateData();
        }
        
    }
    private static class TableFlyModel extends AbstractTableModel implements  Observer{
        List<Vuelo> elementos;

        public TableFlyModel (){
            
            elementos = ListaVuelos.getInstance().getVuelos();
            ListaVuelos.getInstance().addObserver(this);
        }

        @Override
        public int getRowCount() {
            return elementos.size();
        }

        @Override
        public int getColumnCount() {
            return 5;
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            Vuelo city = elementos.get(rowIndex);
            switch(columnIndex){
                case 0: return city.getNum();
                case 1 : return city.descipcion();
                case 2 : return city.getSalida();
                case 3 : return city.getLlegada();
                case 4 : return Math.abs(city.getLlegada()-city.getSalida());
                
               
                default: throw new IndexOutOfBoundsException();
            }
        }
        
        public void changeData(List<Vuelo> citiesList) {
            elementos= citiesList;
            this.fireTableDataChanged();
        }
        
        @Override
        public String getColumnName(int col) {
             switch(col){
                 case 0 : return "Numero";
                 case 1 : return "Descripcion";
                 case 2 : return "salida";
                 case 3 : return "llegada";
                 case 4: return "duracion";
                 
                 default: throw new IndexOutOfBoundsException();
             }
        }

        @Override
        public void update(Observable o, Object arg) {
            if(o instanceof ListaVuelos){
                changeData(((ListaVuelos) o).getVuelos());
                
            }
        }
        
    }
    
    public TableModel getModeloTable(){
        return new TableFlyModel();
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton addFlyButton;
    private javax.swing.JComboBox<Ciudad> cityBox;
    private javax.swing.JComboBox<Ciudad> destinoBox;
    private javax.swing.JLabel destinoLabel;
    private javax.swing.JScrollPane escalaScrollPanel;
    private javax.swing.JTable escalasTable;
    private javax.swing.JLabel estadoActual;
    private javax.swing.JLabel infoText;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JComboBox<Integer> llegadaBox;
    private javax.swing.JComboBox<Integer> llegadaEscalaBox;
    private javax.swing.JTextField numeroTextSpace;
    private javax.swing.JComboBox<Ciudad> origenBox;
    private javax.swing.JLabel origenLabel;
    private javax.swing.JComboBox<Integer> salidaBox;
    private javax.swing.JComboBox<Integer> salidaEscalaBox;
    private javax.swing.JButton updateFlyButton;
    private javax.swing.JScrollPane vuelosScrollPane;
    private javax.swing.JTable vuelosTable;
    // End of variables declaration//GEN-END:variables
    
    
    private Vuelo selectedVuelo = null;

    private TablaEscalasModel tablaEscalasModel = new TablaEscalasModel(selectedVuelo);

    public TablaEscalasModel getTablaEscalasModel() {
        return tablaEscalasModel;
    }

    public void setTablaEscalasModel(TablaEscalasModel tablaEscalasModel) {
        this.tablaEscalasModel = tablaEscalasModel;
    }
    
    
}
